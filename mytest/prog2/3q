#include "libc.h"
#include "syscall.h"

typedef long long INT;

void llexit(long long s) {
	__syscall1(__NR_exit, s);
}

INT puts(const char *s) {
	return __syscall3(__NR_write, 1, (long long)s, strlen(s));
}

INT putchar(INT c) {
	INT s[1];
	s[0] = c;
	return __syscall3(__NR_write, 1, (long long)s, 1);
}

char* current_brk;
void *malloc(unsigned long size) {
	size = ((size-1)/8+1)*8;
	current_brk += size;
	__syscall1(__NR_brk, (long long)current_brk);
	return (current_brk-size);
}

// from musl
INT isspace(INT c)
{
	return c == ' ' || (unsigned )c-'\t' < 5;
}

INT isdigit(INT c)
{
	return (unsigned)c-'0' < 10;
}

long atol(const char *s)
{
	long n=0;
	INT neg=0;
	while (isspace(*s)) s++;
	switch (*s) {
	case '-': neg=1;
	case '+': s++;
	}
	/* Compute n as a negative number to avoid overflow on LONG_MIN */
	while (isdigit(*s))
		n = 10*n - (*s++ - '0');
	return neg ? n : -n;
}

time_t time(time_t *t)
{
	struct timespec ts;
	__syscall2(__NR_clock_gettime, CLOCK_REALTIME, (long long)&ts);
	if (t) *t = ts.tv_sec;
	return ts.tv_sec;
}

INT __libc_start_main(
	INT (*main)(INT, char **, char **), INT argc, char **argv,
	INT (*init)(INT, char **, char **), void (*fini)(void),
	void (*ldso_fini)(void))
{
	char **envp = argv+argc+1;

	//__init_libc(envp);

	//libc.ldso_fini = ldso_fini;
	//libc.fini = fini;

	/* Execute constructors (static) linked into the application */
	//if (init) init(argc, argv, envp);

	current_brk = (char*)__syscall1(__NR_brk, 0);

	/* Pass control to to application */
	exit(
		main(argc, argv, envp)
	)
	;
	return 0;
}

size_t llstrlen(const char *s) {
return 1;
	//INT l = 0;
	//while(*s++) ++l;
	//return l;
#if 0
	INT l = 0;
	INT c;
	INT *salign;
	INT offset;
	do {
		salign = (INT*)(((unsigned long long)s)&~7);
		offset = (((unsigned long long)s)&7);
		c = *salign;
		c &= (0xff << offset);
		++s;
		++l;
	} while(c);
	return l;
#endif
}
