; ModuleID = 'libc.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timespec = type { i64, i64 }

@current_brk = common global i8* null, align 8

; Function Attrs: nounwind uwtable
define void @llexit(i64 %s) #0 {
entry:
  %0 = tail call i64 asm sideeffect "syscall", "={ax},{ax},{di},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 60, i64 %s) #3, !srcloc !1
  ret void
}

; Function Attrs: nounwind readonly uwtable
define i64 @llstrlen(i8* %s) #1 {
entry:
  %0 = ptrtoint i8* %s to i64
  %and = and i64 %0, -8
  %1 = inttoptr i64 %and to i64*
  %rem = and i64 %0, 7
  %sub = sub i64 0, %rem
  switch i64 %rem, label %entry.sw.default_crit_edge [
    i64 0, label %do.body
    i64 1, label %entry.sw.bb3_crit_edge
    i64 2, label %entry.sw.bb8_crit_edge
    i64 3, label %entry.sw.bb14_crit_edge
    i64 4, label %entry.sw.bb20_crit_edge
    i64 5, label %entry.sw.bb26_crit_edge
    i64 6, label %entry.sw.bb32_crit_edge
  ]

entry.sw.bb32_crit_edge:                          ; preds = %entry
  %.pre66 = load i64* %1, align 8, !tbaa !2
  br label %sw.bb32

entry.sw.bb26_crit_edge:                          ; preds = %entry
  %.pre65 = load i64* %1, align 8, !tbaa !2
  br label %sw.bb26

entry.sw.bb20_crit_edge:                          ; preds = %entry
  %.pre64 = load i64* %1, align 8, !tbaa !2
  br label %sw.bb20

entry.sw.bb14_crit_edge:                          ; preds = %entry
  %.pre63 = load i64* %1, align 8, !tbaa !2
  br label %sw.bb14

entry.sw.bb8_crit_edge:                           ; preds = %entry
  %.pre62 = load i64* %1, align 8, !tbaa !2
  br label %sw.bb8

entry.sw.bb3_crit_edge:                           ; preds = %entry
  %.pre61 = load i64* %1, align 8, !tbaa !2
  br label %sw.bb3

entry.sw.default_crit_edge:                       ; preds = %entry
  %.pre = load i64* %1, align 8, !tbaa !2
  br label %sw.default

do.body:                                          ; preds = %entry, %if.end42
  %l.0 = phi i64 [ %add43, %if.end42 ], [ %sub, %entry ]
  %p.0 = phi i64* [ %incdec.ptr, %if.end42 ], [ %1, %entry ]
  %2 = load i64* %p.0, align 8, !tbaa !2
  %and2 = and i64 %2, 255
  %cmp = icmp eq i64 %and2, 0
  br i1 %cmp, label %sw.epilog, label %sw.bb3

sw.bb3:                                           ; preds = %entry.sw.bb3_crit_edge, %do.body
  %3 = phi i64 [ %2, %do.body ], [ %.pre61, %entry.sw.bb3_crit_edge ]
  %l.1 = phi i64 [ %l.0, %do.body ], [ %sub, %entry.sw.bb3_crit_edge ]
  %p.1 = phi i64* [ %p.0, %do.body ], [ %1, %entry.sw.bb3_crit_edge ]
  %and4 = and i64 %3, 65280
  %cmp5 = icmp eq i64 %and4, 0
  br i1 %cmp5, label %if.then6, label %sw.bb8

if.then6:                                         ; preds = %sw.bb3
  %add = add nsw i64 %l.1, 1
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry.sw.bb8_crit_edge, %sw.bb3
  %4 = phi i64 [ %3, %sw.bb3 ], [ %.pre62, %entry.sw.bb8_crit_edge ]
  %l.2 = phi i64 [ %l.1, %sw.bb3 ], [ %sub, %entry.sw.bb8_crit_edge ]
  %p.2 = phi i64* [ %p.1, %sw.bb3 ], [ %1, %entry.sw.bb8_crit_edge ]
  %and9 = and i64 %4, 16711680
  %cmp10 = icmp eq i64 %and9, 0
  br i1 %cmp10, label %if.then11, label %sw.bb14

if.then11:                                        ; preds = %sw.bb8
  %add12 = add nsw i64 %l.2, 2
  br label %sw.epilog

sw.bb14:                                          ; preds = %entry.sw.bb14_crit_edge, %sw.bb8
  %5 = phi i64 [ %4, %sw.bb8 ], [ %.pre63, %entry.sw.bb14_crit_edge ]
  %l.3 = phi i64 [ %l.2, %sw.bb8 ], [ %sub, %entry.sw.bb14_crit_edge ]
  %p.3 = phi i64* [ %p.2, %sw.bb8 ], [ %1, %entry.sw.bb14_crit_edge ]
  %and15 = and i64 %5, 4278190080
  %cmp16 = icmp eq i64 %and15, 0
  br i1 %cmp16, label %if.then17, label %sw.bb20

if.then17:                                        ; preds = %sw.bb14
  %add18 = add nsw i64 %l.3, 3
  br label %sw.epilog

sw.bb20:                                          ; preds = %entry.sw.bb20_crit_edge, %sw.bb14
  %6 = phi i64 [ %5, %sw.bb14 ], [ %.pre64, %entry.sw.bb20_crit_edge ]
  %l.4 = phi i64 [ %l.3, %sw.bb14 ], [ %sub, %entry.sw.bb20_crit_edge ]
  %p.4 = phi i64* [ %p.3, %sw.bb14 ], [ %1, %entry.sw.bb20_crit_edge ]
  %and21 = and i64 %6, 1095216660480
  %cmp22 = icmp eq i64 %and21, 0
  br i1 %cmp22, label %if.then23, label %sw.bb26

if.then23:                                        ; preds = %sw.bb20
  %add24 = add nsw i64 %l.4, 4
  br label %sw.epilog

sw.bb26:                                          ; preds = %entry.sw.bb26_crit_edge, %sw.bb20
  %7 = phi i64 [ %6, %sw.bb20 ], [ %.pre65, %entry.sw.bb26_crit_edge ]
  %l.5 = phi i64 [ %l.4, %sw.bb20 ], [ %sub, %entry.sw.bb26_crit_edge ]
  %p.5 = phi i64* [ %p.4, %sw.bb20 ], [ %1, %entry.sw.bb26_crit_edge ]
  %and27 = and i64 %7, 280375465082880
  %cmp28 = icmp eq i64 %and27, 0
  br i1 %cmp28, label %if.then29, label %sw.bb32

if.then29:                                        ; preds = %sw.bb26
  %add30 = add nsw i64 %l.5, 5
  br label %sw.epilog

sw.bb32:                                          ; preds = %entry.sw.bb32_crit_edge, %sw.bb26
  %8 = phi i64 [ %7, %sw.bb26 ], [ %.pre66, %entry.sw.bb32_crit_edge ]
  %l.6 = phi i64 [ %l.5, %sw.bb26 ], [ %sub, %entry.sw.bb32_crit_edge ]
  %p.6 = phi i64* [ %p.5, %sw.bb26 ], [ %1, %entry.sw.bb32_crit_edge ]
  %and33 = and i64 %8, 71776119061217280
  %cmp34 = icmp eq i64 %and33, 0
  br i1 %cmp34, label %if.then35, label %sw.default

if.then35:                                        ; preds = %sw.bb32
  %add36 = add nsw i64 %l.6, 6
  br label %sw.epilog

sw.default:                                       ; preds = %entry.sw.default_crit_edge, %sw.bb32
  %9 = phi i64 [ %.pre, %entry.sw.default_crit_edge ], [ %8, %sw.bb32 ]
  %l.7 = phi i64 [ %sub, %entry.sw.default_crit_edge ], [ %l.6, %sw.bb32 ]
  %p.7 = phi i64* [ %1, %entry.sw.default_crit_edge ], [ %p.6, %sw.bb32 ]
  %cmp39 = icmp ult i64 %9, 72057594037927936
  br i1 %cmp39, label %if.then40, label %if.end42

if.then40:                                        ; preds = %sw.default
  %add41 = add nsw i64 %l.7, 7
  br label %sw.epilog

if.end42:                                         ; preds = %sw.default
  %add43 = add nsw i64 %l.7, 8
  %incdec.ptr = getelementptr inbounds i64* %p.7, i64 1
  br label %do.body

sw.epilog:                                        ; preds = %do.body, %if.then6, %if.then11, %if.then17, %if.then23, %if.then29, %if.then35, %if.then40
  %retval.0 = phi i64 [ %add41, %if.then40 ], [ %add, %if.then6 ], [ %add12, %if.then11 ], [ %add18, %if.then17 ], [ %add24, %if.then23 ], [ %add30, %if.then29 ], [ %add36, %if.then35 ], [ %l.0, %do.body ]
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define i64 @puts(i8* %s) #0 {
entry:
  %0 = ptrtoint i8* %s to i64
  %and.i = and i64 %0, -8
  %1 = inttoptr i64 %and.i to i64*
  %rem.i = and i64 %0, 7
  %sub.i = sub i64 0, %rem.i
  switch i64 %rem.i, label %entry.sw.default_crit_edge.i [
    i64 0, label %do.body.i
    i64 1, label %entry.sw.bb3_crit_edge.i
    i64 2, label %entry.sw.bb8_crit_edge.i
    i64 3, label %entry.sw.bb14_crit_edge.i
    i64 4, label %entry.sw.bb20_crit_edge.i
    i64 5, label %entry.sw.bb26_crit_edge.i
    i64 6, label %entry.sw.bb32_crit_edge.i
  ]

entry.sw.bb32_crit_edge.i:                        ; preds = %entry
  %.pre66.i = load i64* %1, align 8, !tbaa !2
  br label %sw.bb32.i

entry.sw.bb26_crit_edge.i:                        ; preds = %entry
  %.pre65.i = load i64* %1, align 8, !tbaa !2
  br label %sw.bb26.i

entry.sw.bb20_crit_edge.i:                        ; preds = %entry
  %.pre64.i = load i64* %1, align 8, !tbaa !2
  br label %sw.bb20.i

entry.sw.bb14_crit_edge.i:                        ; preds = %entry
  %.pre63.i = load i64* %1, align 8, !tbaa !2
  br label %sw.bb14.i

entry.sw.bb8_crit_edge.i:                         ; preds = %entry
  %.pre62.i = load i64* %1, align 8, !tbaa !2
  br label %sw.bb8.i

entry.sw.bb3_crit_edge.i:                         ; preds = %entry
  %.pre61.i = load i64* %1, align 8, !tbaa !2
  br label %sw.bb3.i

entry.sw.default_crit_edge.i:                     ; preds = %entry
  %.pre.i = load i64* %1, align 8, !tbaa !2
  br label %sw.default.i

do.body.i:                                        ; preds = %if.end42.i, %entry
  %l.0.i = phi i64 [ %add43.i, %if.end42.i ], [ %sub.i, %entry ]
  %p.0.i = phi i64* [ %incdec.ptr.i, %if.end42.i ], [ %1, %entry ]
  %2 = load i64* %p.0.i, align 8, !tbaa !2
  %and2.i = and i64 %2, 255
  %cmp.i = icmp eq i64 %and2.i, 0
  br i1 %cmp.i, label %llstrlen.exit, label %sw.bb3.i

sw.bb3.i:                                         ; preds = %do.body.i, %entry.sw.bb3_crit_edge.i
  %3 = phi i64 [ %2, %do.body.i ], [ %.pre61.i, %entry.sw.bb3_crit_edge.i ]
  %l.1.i = phi i64 [ %l.0.i, %do.body.i ], [ %sub.i, %entry.sw.bb3_crit_edge.i ]
  %p.1.i = phi i64* [ %p.0.i, %do.body.i ], [ %1, %entry.sw.bb3_crit_edge.i ]
  %and4.i = and i64 %3, 65280
  %cmp5.i = icmp eq i64 %and4.i, 0
  br i1 %cmp5.i, label %if.then6.i, label %sw.bb8.i

if.then6.i:                                       ; preds = %sw.bb3.i
  %add.i = add nsw i64 %l.1.i, 1
  br label %llstrlen.exit

sw.bb8.i:                                         ; preds = %sw.bb3.i, %entry.sw.bb8_crit_edge.i
  %4 = phi i64 [ %3, %sw.bb3.i ], [ %.pre62.i, %entry.sw.bb8_crit_edge.i ]
  %l.2.i = phi i64 [ %l.1.i, %sw.bb3.i ], [ %sub.i, %entry.sw.bb8_crit_edge.i ]
  %p.2.i = phi i64* [ %p.1.i, %sw.bb3.i ], [ %1, %entry.sw.bb8_crit_edge.i ]
  %and9.i = and i64 %4, 16711680
  %cmp10.i = icmp eq i64 %and9.i, 0
  br i1 %cmp10.i, label %if.then11.i, label %sw.bb14.i

if.then11.i:                                      ; preds = %sw.bb8.i
  %add12.i = add nsw i64 %l.2.i, 2
  br label %llstrlen.exit

sw.bb14.i:                                        ; preds = %sw.bb8.i, %entry.sw.bb14_crit_edge.i
  %5 = phi i64 [ %4, %sw.bb8.i ], [ %.pre63.i, %entry.sw.bb14_crit_edge.i ]
  %l.3.i = phi i64 [ %l.2.i, %sw.bb8.i ], [ %sub.i, %entry.sw.bb14_crit_edge.i ]
  %p.3.i = phi i64* [ %p.2.i, %sw.bb8.i ], [ %1, %entry.sw.bb14_crit_edge.i ]
  %and15.i = and i64 %5, 4278190080
  %cmp16.i = icmp eq i64 %and15.i, 0
  br i1 %cmp16.i, label %if.then17.i, label %sw.bb20.i

if.then17.i:                                      ; preds = %sw.bb14.i
  %add18.i = add nsw i64 %l.3.i, 3
  br label %llstrlen.exit

sw.bb20.i:                                        ; preds = %sw.bb14.i, %entry.sw.bb20_crit_edge.i
  %6 = phi i64 [ %5, %sw.bb14.i ], [ %.pre64.i, %entry.sw.bb20_crit_edge.i ]
  %l.4.i = phi i64 [ %l.3.i, %sw.bb14.i ], [ %sub.i, %entry.sw.bb20_crit_edge.i ]
  %p.4.i = phi i64* [ %p.3.i, %sw.bb14.i ], [ %1, %entry.sw.bb20_crit_edge.i ]
  %and21.i = and i64 %6, 1095216660480
  %cmp22.i = icmp eq i64 %and21.i, 0
  br i1 %cmp22.i, label %if.then23.i, label %sw.bb26.i

if.then23.i:                                      ; preds = %sw.bb20.i
  %add24.i = add nsw i64 %l.4.i, 4
  br label %llstrlen.exit

sw.bb26.i:                                        ; preds = %sw.bb20.i, %entry.sw.bb26_crit_edge.i
  %7 = phi i64 [ %6, %sw.bb20.i ], [ %.pre65.i, %entry.sw.bb26_crit_edge.i ]
  %l.5.i = phi i64 [ %l.4.i, %sw.bb20.i ], [ %sub.i, %entry.sw.bb26_crit_edge.i ]
  %p.5.i = phi i64* [ %p.4.i, %sw.bb20.i ], [ %1, %entry.sw.bb26_crit_edge.i ]
  %and27.i = and i64 %7, 280375465082880
  %cmp28.i = icmp eq i64 %and27.i, 0
  br i1 %cmp28.i, label %if.then29.i, label %sw.bb32.i

if.then29.i:                                      ; preds = %sw.bb26.i
  %add30.i = add nsw i64 %l.5.i, 5
  br label %llstrlen.exit

sw.bb32.i:                                        ; preds = %sw.bb26.i, %entry.sw.bb32_crit_edge.i
  %8 = phi i64 [ %7, %sw.bb26.i ], [ %.pre66.i, %entry.sw.bb32_crit_edge.i ]
  %l.6.i = phi i64 [ %l.5.i, %sw.bb26.i ], [ %sub.i, %entry.sw.bb32_crit_edge.i ]
  %p.6.i = phi i64* [ %p.5.i, %sw.bb26.i ], [ %1, %entry.sw.bb32_crit_edge.i ]
  %and33.i = and i64 %8, 71776119061217280
  %cmp34.i = icmp eq i64 %and33.i, 0
  br i1 %cmp34.i, label %if.then35.i, label %sw.default.i

if.then35.i:                                      ; preds = %sw.bb32.i
  %add36.i = add nsw i64 %l.6.i, 6
  br label %llstrlen.exit

sw.default.i:                                     ; preds = %sw.bb32.i, %entry.sw.default_crit_edge.i
  %9 = phi i64 [ %.pre.i, %entry.sw.default_crit_edge.i ], [ %8, %sw.bb32.i ]
  %l.7.i = phi i64 [ %sub.i, %entry.sw.default_crit_edge.i ], [ %l.6.i, %sw.bb32.i ]
  %p.7.i = phi i64* [ %1, %entry.sw.default_crit_edge.i ], [ %p.6.i, %sw.bb32.i ]
  %cmp39.i = icmp ult i64 %9, 72057594037927936
  br i1 %cmp39.i, label %if.then40.i, label %if.end42.i

if.then40.i:                                      ; preds = %sw.default.i
  %add41.i = add nsw i64 %l.7.i, 7
  br label %llstrlen.exit

if.end42.i:                                       ; preds = %sw.default.i
  %add43.i = add nsw i64 %l.7.i, 8
  %incdec.ptr.i = getelementptr inbounds i64* %p.7.i, i64 1
  br label %do.body.i

llstrlen.exit:                                    ; preds = %do.body.i, %if.then6.i, %if.then11.i, %if.then17.i, %if.then23.i, %if.then29.i, %if.then35.i, %if.then40.i
  %retval.0.i = phi i64 [ %add41.i, %if.then40.i ], [ %add.i, %if.then6.i ], [ %add12.i, %if.then11.i ], [ %add18.i, %if.then17.i ], [ %add24.i, %if.then23.i ], [ %add30.i, %if.then29.i ], [ %add36.i, %if.then35.i ], [ %l.0.i, %do.body.i ]
  %10 = tail call i64 asm sideeffect "syscall", "={ax},{ax},{di},{si},{dx},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 1, i64 1, i64 %0, i64 %retval.0.i) #3, !srcloc !6
  ret i64 %10
}

; Function Attrs: nounwind uwtable
define i64 @putchar(i64 %c) #0 {
entry:
  %s = alloca [1 x i64], align 8
  %arrayidx = getelementptr inbounds [1 x i64]* %s, i64 0, i64 0
  store i64 %c, i64* %arrayidx, align 8, !tbaa !2
  %0 = ptrtoint [1 x i64]* %s to i64
  %1 = call i64 asm sideeffect "syscall", "={ax},{ax},{di},{si},{dx},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 1, i64 1, i64 %0, i64 1) #3, !srcloc !6
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i8* @malloc(i64 %size) #0 {
entry:
  %div4 = add i64 %size, 7
  %mul = and i64 %div4, -8
  %0 = load i8** @current_brk, align 8, !tbaa !7
  %add.ptr = getelementptr inbounds i8* %0, i64 %mul
  store i8* %add.ptr, i8** @current_brk, align 8, !tbaa !7
  %1 = ptrtoint i8* %add.ptr to i64
  %2 = tail call i64 asm sideeffect "syscall", "={ax},{ax},{di},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 12, i64 %1) #3, !srcloc !1
  %3 = load i8** @current_brk, align 8, !tbaa !7
  %idx.neg = sub i64 0, %mul
  %add.ptr1 = getelementptr inbounds i8* %3, i64 %idx.neg
  ret i8* %add.ptr1
}

; Function Attrs: nounwind readnone uwtable
define i64 @isspace(i64 %c) #2 {
entry:
  %cmp = icmp eq i64 %c, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %sub = add i64 %c, -9
  %cmp1 = icmp ult i64 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %0 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %conv = zext i1 %0 to i64
  ret i64 %conv
}

; Function Attrs: nounwind readnone uwtable
define i64 @isdigit(i64 %c) #2 {
entry:
  %sub = add i64 %c, -48
  %cmp = icmp ult i64 %sub, 10
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

; Function Attrs: nounwind readonly uwtable
define i64 @LLreadchar(i8* %c) #1 {
entry:
  %0 = ptrtoint i8* %c to i64
  %and = and i64 %0, -8
  %1 = inttoptr i64 %and to i64*
  %2 = load i64* %1, align 8, !tbaa !2
  %and1 = and i64 %0, 7
  switch i64 %and1, label %sw.epilog [
    i64 7, label %sw.bb14
    i64 1, label %sw.bb2
    i64 2, label %sw.bb4
    i64 3, label %sw.bb6
    i64 4, label %sw.bb8
    i64 5, label %sw.bb10
    i64 6, label %sw.bb12
  ]

sw.bb2:                                           ; preds = %entry
  %shr3 = lshr i64 %2, 8
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  %shr5 = lshr i64 %2, 16
  br label %sw.epilog

sw.bb6:                                           ; preds = %entry
  %shr7 = lshr i64 %2, 24
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  %shr9 = lshr i64 %2, 32
  br label %sw.epilog

sw.bb10:                                          ; preds = %entry
  %shr11 = lshr i64 %2, 40
  br label %sw.epilog

sw.bb12:                                          ; preds = %entry
  %shr13 = lshr i64 %2, 48
  br label %sw.epilog

sw.bb14:                                          ; preds = %entry
  %shr15 = lshr i64 %2, 56
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb14, %sw.bb12, %sw.bb10, %sw.bb8, %sw.bb6, %sw.bb4, %sw.bb2
  %r.0 = phi i64 [ %shr15, %sw.bb14 ], [ %shr13, %sw.bb12 ], [ %shr11, %sw.bb10 ], [ %shr9, %sw.bb8 ], [ %shr7, %sw.bb6 ], [ %shr5, %sw.bb4 ], [ %shr3, %sw.bb2 ], [ %2, %entry ]
  %and16 = and i64 %r.0, 255
  ret i64 %and16
}

; Function Attrs: nounwind readonly uwtable
define i64 @atol(i8* %s) #1 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %s.addr.0 = phi i8* [ %s, %entry ], [ %incdec.ptr, %while.body ]
  %0 = ptrtoint i8* %s.addr.0 to i64
  %and.i = and i64 %0, -8
  %1 = inttoptr i64 %and.i to i64*
  %2 = load i64* %1, align 8, !tbaa !2
  %and1.i = and i64 %0, 7
  switch i64 %and1.i, label %LLreadchar.exit [
    i64 7, label %sw.bb14.i
    i64 1, label %sw.bb2.i
    i64 2, label %sw.bb4.i
    i64 3, label %sw.bb6.i
    i64 4, label %sw.bb8.i
    i64 5, label %sw.bb10.i
    i64 6, label %sw.bb12.i
  ]

sw.bb2.i:                                         ; preds = %while.cond
  %shr3.i = lshr i64 %2, 8
  br label %LLreadchar.exit

sw.bb4.i:                                         ; preds = %while.cond
  %shr5.i = lshr i64 %2, 16
  br label %LLreadchar.exit

sw.bb6.i:                                         ; preds = %while.cond
  %shr7.i = lshr i64 %2, 24
  br label %LLreadchar.exit

sw.bb8.i:                                         ; preds = %while.cond
  %shr9.i = lshr i64 %2, 32
  br label %LLreadchar.exit

sw.bb10.i:                                        ; preds = %while.cond
  %shr11.i = lshr i64 %2, 40
  br label %LLreadchar.exit

sw.bb12.i:                                        ; preds = %while.cond
  %shr13.i = lshr i64 %2, 48
  br label %LLreadchar.exit

sw.bb14.i:                                        ; preds = %while.cond
  %shr15.i = lshr i64 %2, 56
  br label %LLreadchar.exit

LLreadchar.exit:                                  ; preds = %while.cond, %sw.bb2.i, %sw.bb4.i, %sw.bb6.i, %sw.bb8.i, %sw.bb10.i, %sw.bb12.i, %sw.bb14.i
  %r.0.i = phi i64 [ %shr15.i, %sw.bb14.i ], [ %shr13.i, %sw.bb12.i ], [ %shr11.i, %sw.bb10.i ], [ %shr9.i, %sw.bb8.i ], [ %shr7.i, %sw.bb6.i ], [ %shr5.i, %sw.bb4.i ], [ %shr3.i, %sw.bb2.i ], [ %2, %while.cond ]
  %and16.i = and i64 %r.0.i, 255
  switch i64 %and16.i, label %while.end [
    i64 32, label %while.body
    i64 13, label %while.body
    i64 12, label %while.body
    i64 11, label %while.body
    i64 10, label %while.body
    i64 9, label %while.body
  ]

while.body:                                       ; preds = %LLreadchar.exit, %LLreadchar.exit, %LLreadchar.exit, %LLreadchar.exit, %LLreadchar.exit, %LLreadchar.exit
  %incdec.ptr = getelementptr inbounds i8* %s.addr.0, i64 1
  br label %while.cond

while.end:                                        ; preds = %LLreadchar.exit
  switch i64 %and1.i, label %LLreadchar.exit78 [
    i64 7, label %sw.bb14.i75
    i64 1, label %sw.bb2.i63
    i64 2, label %sw.bb4.i65
    i64 3, label %sw.bb6.i67
    i64 4, label %sw.bb8.i69
    i64 5, label %sw.bb10.i71
    i64 6, label %sw.bb12.i73
  ]

sw.bb2.i63:                                       ; preds = %while.end
  %shr3.i62 = lshr i64 %2, 8
  br label %LLreadchar.exit78

sw.bb4.i65:                                       ; preds = %while.end
  %shr5.i64 = lshr i64 %2, 16
  br label %LLreadchar.exit78

sw.bb6.i67:                                       ; preds = %while.end
  %shr7.i66 = lshr i64 %2, 24
  br label %LLreadchar.exit78

sw.bb8.i69:                                       ; preds = %while.end
  %shr9.i68 = lshr i64 %2, 32
  br label %LLreadchar.exit78

sw.bb10.i71:                                      ; preds = %while.end
  %shr11.i70 = lshr i64 %2, 40
  br label %LLreadchar.exit78

sw.bb12.i73:                                      ; preds = %while.end
  %shr13.i72 = lshr i64 %2, 48
  br label %LLreadchar.exit78

sw.bb14.i75:                                      ; preds = %while.end
  %shr15.i74 = lshr i64 %2, 56
  br label %LLreadchar.exit78

LLreadchar.exit78:                                ; preds = %while.end, %sw.bb2.i63, %sw.bb4.i65, %sw.bb6.i67, %sw.bb8.i69, %sw.bb10.i71, %sw.bb12.i73, %sw.bb14.i75
  %r.0.i76 = phi i64 [ %shr15.i74, %sw.bb14.i75 ], [ %shr13.i72, %sw.bb12.i73 ], [ %shr11.i70, %sw.bb10.i71 ], [ %shr9.i68, %sw.bb8.i69 ], [ %shr7.i66, %sw.bb6.i67 ], [ %shr5.i64, %sw.bb4.i65 ], [ %shr3.i62, %sw.bb2.i63 ], [ %2, %while.end ]
  %and16.i77 = and i64 %r.0.i76, 255
  switch i64 %and16.i77, label %while.cond5.preheader [
    i64 45, label %sw.bb
    i64 43, label %sw.bb3
  ]

sw.bb:                                            ; preds = %LLreadchar.exit78
  br label %sw.bb3

sw.bb3:                                           ; preds = %LLreadchar.exit78, %sw.bb
  %neg.0 = phi i64 [ 0, %LLreadchar.exit78 ], [ 1, %sw.bb ]
  %incdec.ptr4 = getelementptr inbounds i8* %s.addr.0, i64 1
  br label %while.cond5.preheader

while.cond5.preheader:                            ; preds = %sw.bb3, %LLreadchar.exit78
  %s.addr.1.ph = phi i8* [ %s.addr.0, %LLreadchar.exit78 ], [ %incdec.ptr4, %sw.bb3 ]
  %neg.1.ph = phi i64 [ 0, %LLreadchar.exit78 ], [ %neg.0, %sw.bb3 ]
  br label %while.cond5

while.cond5:                                      ; preds = %while.cond5.preheader, %LLreadchar.exit40
  %s.addr.1 = phi i8* [ %incdec.ptr10, %LLreadchar.exit40 ], [ %s.addr.1.ph, %while.cond5.preheader ]
  %n.0 = phi i64 [ %sub12, %LLreadchar.exit40 ], [ 0, %while.cond5.preheader ]
  %3 = ptrtoint i8* %s.addr.1 to i64
  %and.i41 = and i64 %3, -8
  %4 = inttoptr i64 %and.i41 to i64*
  %5 = load i64* %4, align 8, !tbaa !2
  %and1.i42 = and i64 %3, 7
  switch i64 %and1.i42, label %LLreadchar.exit59 [
    i64 7, label %sw.bb14.i56
    i64 1, label %sw.bb2.i44
    i64 2, label %sw.bb4.i46
    i64 3, label %sw.bb6.i48
    i64 4, label %sw.bb8.i50
    i64 5, label %sw.bb10.i52
    i64 6, label %sw.bb12.i54
  ]

sw.bb2.i44:                                       ; preds = %while.cond5
  %shr3.i43 = lshr i64 %5, 8
  br label %LLreadchar.exit59

sw.bb4.i46:                                       ; preds = %while.cond5
  %shr5.i45 = lshr i64 %5, 16
  br label %LLreadchar.exit59

sw.bb6.i48:                                       ; preds = %while.cond5
  %shr7.i47 = lshr i64 %5, 24
  br label %LLreadchar.exit59

sw.bb8.i50:                                       ; preds = %while.cond5
  %shr9.i49 = lshr i64 %5, 32
  br label %LLreadchar.exit59

sw.bb10.i52:                                      ; preds = %while.cond5
  %shr11.i51 = lshr i64 %5, 40
  br label %LLreadchar.exit59

sw.bb12.i54:                                      ; preds = %while.cond5
  %shr13.i53 = lshr i64 %5, 48
  br label %LLreadchar.exit59

sw.bb14.i56:                                      ; preds = %while.cond5
  %shr15.i55 = lshr i64 %5, 56
  br label %LLreadchar.exit59

LLreadchar.exit59:                                ; preds = %while.cond5, %sw.bb2.i44, %sw.bb4.i46, %sw.bb6.i48, %sw.bb8.i50, %sw.bb10.i52, %sw.bb12.i54, %sw.bb14.i56
  %r.0.i57 = phi i64 [ %shr15.i55, %sw.bb14.i56 ], [ %shr13.i53, %sw.bb12.i54 ], [ %shr11.i51, %sw.bb10.i52 ], [ %shr9.i49, %sw.bb8.i50 ], [ %shr7.i47, %sw.bb6.i48 ], [ %shr5.i45, %sw.bb4.i46 ], [ %shr3.i43, %sw.bb2.i44 ], [ %5, %while.cond5 ]
  %and16.i58 = and i64 %r.0.i57, 255
  %sub.i = add i64 %and16.i58, -48
  %cmp.i = icmp ult i64 %sub.i, 10
  br i1 %cmp.i, label %while.body9, label %while.end13

while.body9:                                      ; preds = %LLreadchar.exit59
  %mul = mul nsw i64 %n.0, 10
  %incdec.ptr10 = getelementptr inbounds i8* %s.addr.1, i64 1
  switch i64 %and1.i42, label %LLreadchar.exit40 [
    i64 7, label %sw.bb14.i37
    i64 1, label %sw.bb2.i25
    i64 2, label %sw.bb4.i27
    i64 3, label %sw.bb6.i29
    i64 4, label %sw.bb8.i31
    i64 5, label %sw.bb10.i33
    i64 6, label %sw.bb12.i35
  ]

sw.bb2.i25:                                       ; preds = %while.body9
  %shr3.i24 = lshr i64 %5, 8
  br label %LLreadchar.exit40

sw.bb4.i27:                                       ; preds = %while.body9
  %shr5.i26 = lshr i64 %5, 16
  br label %LLreadchar.exit40

sw.bb6.i29:                                       ; preds = %while.body9
  %shr7.i28 = lshr i64 %5, 24
  br label %LLreadchar.exit40

sw.bb8.i31:                                       ; preds = %while.body9
  %shr9.i30 = lshr i64 %5, 32
  br label %LLreadchar.exit40

sw.bb10.i33:                                      ; preds = %while.body9
  %shr11.i32 = lshr i64 %5, 40
  br label %LLreadchar.exit40

sw.bb12.i35:                                      ; preds = %while.body9
  %shr13.i34 = lshr i64 %5, 48
  br label %LLreadchar.exit40

sw.bb14.i37:                                      ; preds = %while.body9
  %shr15.i36 = lshr i64 %5, 56
  br label %LLreadchar.exit40

LLreadchar.exit40:                                ; preds = %while.body9, %sw.bb2.i25, %sw.bb4.i27, %sw.bb6.i29, %sw.bb8.i31, %sw.bb10.i33, %sw.bb12.i35, %sw.bb14.i37
  %r.0.i38 = phi i64 [ %shr15.i36, %sw.bb14.i37 ], [ %shr13.i34, %sw.bb12.i35 ], [ %shr11.i32, %sw.bb10.i33 ], [ %shr9.i30, %sw.bb8.i31 ], [ %shr7.i28, %sw.bb6.i29 ], [ %shr5.i26, %sw.bb4.i27 ], [ %shr3.i24, %sw.bb2.i25 ], [ %5, %while.body9 ]
  %and16.i39 = and i64 %r.0.i38, 255
  %sub.neg = add i64 %mul, 48
  %sub12 = sub i64 %sub.neg, %and16.i39
  br label %while.cond5

while.end13:                                      ; preds = %LLreadchar.exit59
  %tobool14 = icmp eq i64 %neg.1.ph, 0
  %sub15 = sub nsw i64 0, %n.0
  %sub15.n.0 = select i1 %tobool14, i64 %sub15, i64 %n.0
  ret i64 %sub15.n.0
}

; Function Attrs: nounwind uwtable
define i64 @time(i64* %t) #0 {
entry:
  %ts = alloca %struct.timespec, align 8
  %0 = ptrtoint %struct.timespec* %ts to i64
  %1 = call i64 asm sideeffect "syscall", "={ax},{ax},{di},{si},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 228, i64 0, i64 %0) #3, !srcloc !9
  %tobool = icmp eq i64* %t, null
  %tv_sec1.phi.trans.insert = getelementptr inbounds %struct.timespec* %ts, i64 0, i32 0
  %.pre = load i64* %tv_sec1.phi.trans.insert, align 8, !tbaa !10
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 %.pre, i64* %t, align 8, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret i64 %.pre
}

; Function Attrs: nounwind uwtable
define i64 @__libc_start_main(i64 (i64, i8**, i8**)* nocapture %main, i64 %argc, i8** %argv, i64 (i64, i8**, i8**)* nocapture readnone %init, void ()* nocapture readnone %fini, void ()* nocapture readnone %ldso_fini) #0 {
entry:
  %add.ptr.sum = add i64 %argc, 1
  %add.ptr1 = getelementptr inbounds i8** %argv, i64 %add.ptr.sum
  %0 = tail call i64 asm sideeffect "syscall", "={ax},{ax},{di},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 12, i64 0) #3, !srcloc !1
  %1 = inttoptr i64 %0 to i8*
  store i8* %1, i8** @current_brk, align 8, !tbaa !7
  %call2 = tail call i64 %main(i64 %argc, i8** %argv, i8** %add.ptr1) #3
  %2 = tail call i64 asm sideeffect "syscall", "={ax},{ax},{di},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 60, i64 %call2) #3, !srcloc !1
  ret i64 0
}

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk 202454)"}
!1 = metadata !{i32 18532}
!2 = metadata !{metadata !3, metadata !3, i64 0}
!3 = metadata !{metadata !"long long", metadata !4, i64 0}
!4 = metadata !{metadata !"omnipotent char", metadata !5, i64 0}
!5 = metadata !{metadata !"Simple C/C++ TBAA"}
!6 = metadata !{i32 18985}
!7 = metadata !{metadata !8, metadata !8, i64 0}
!8 = metadata !{metadata !"any pointer", metadata !4, i64 0}
!9 = metadata !{i32 18743}
!10 = metadata !{metadata !11, metadata !3, i64 0}
!11 = metadata !{metadata !"timespec", metadata !3, i64 0, metadata !3, i64 8}
